
DROP FUNCTION IF EXISTS GENERAR_FACTURA (
	TIMBRADOS.ID%TYPE,
	FACTURAS_VENTA.CONDICION_VENTA%TYPE,
	CITAS.ID_CITA%TYPE,
	PERSONAS.ID_PERSONA%TYPE, 
	VARCHAR(100)
);

CREATE OR REPLACE FUNCTION GENERAR_FACTURA (
	ID_TIMBRADO TIMBRADOS.ID%TYPE,
	CONDICION FACTURAS_VENTA.CONDICION_VENTA%TYPE,
	ID_CITA CITAS.ID_CITA%TYPE,
	ID_CLIENTE PERSONAS.ID_PERSONA%TYPE, 
	TABLA VARCHAR(100)
)
RETURNS INTEGER
LANGUAGE plpgsql
AS $$
DECLARE
	ULTIMO_EMITIDO INTEGER;
	NRO_FACTURA INTEGER;
	ID_FAC INTEGER;
	NUMERO_FAC VARCHAR(50);
	EST INTEGER;
	EXP INTEGER;
	MAX_FAC INTEGER;
	MIN_FAC INTEGER;
BEGIN

	SELECT ULT_NRO_EMITIDO + 1 AS NUMERO_FACTURA, ESTABLECIMINETO, EXPEDICION, NRO_HASTA, NRO_DESDE
	INTO ULTIMO_EMITIDO, EST, EXP, MAX_FAC, MIN_FAC
	FROM TIMBRADOS
	WHERE ID = ID_TIMBRADO;
	
	IF (ULTIMO_EMITIDO > MAX_FAC OR ULTIMO_EMITIDO < MIN_FAC) THEN
		RAISE EXCEPTION 'YA NO PUEDE SEGUIR EMITIENDO FACTURAS CON EL TIMBRADO'; 
	END IF;
	
	NUMERO_FAC := LPAD(EST::varchar(3) , 3, '0') || '-' || LPAD(EXP::varchar(3) , 3, '0') || '-' || LPAD(ULTIMO_EMITIDO::varchar(7) , 7, '0');

	IF(TABLA = 'TABLA_PERSONAS') THEN
		WITH ROWS AS (	
			INSERT INTO FACTURAS_VENTA(ID_TIMBRADO, CONDICION_VENTA, CODIGO_CITA, PERSONA_CLIENTE, NUMERO_FACTURA)
			VALUES(ID_TIMBRADO, CONDICION, ID_CITA, ID_CLIENTE, NUMERO_FAC) RETURNING COD_FACTURA
		) SELECT COD_FACTURA INTO NRO_FACTURA FROM ROWS;
		
	ELSIF (TABLA = 'TABLA_CLIENTES') THEN
		WITH ROWS AS (
			INSERT INTO FACTURAS_VENTA(ID_TIMBRADO, CONDICION_VENTA, CODIGO_CITA, PERSONA_NO_CLIENTE, NUMERO_FACTURA)
			VALUES(ID_TIMBRADO, CONDICION, ID_CITA, ID_CLIENTE, NUMERO_FAC) RETURNING COD_FACTURA
		) SELECT COD_FACTURA INTO NRO_FACTURA FROM ROWS;
		
	END IF;
	
	UPDATE TIMBRADOS
	SET ULT_NRO_EMITIDO = ULTIMO_EMITIDO
	WHERE ID  = ID_TIMBRADO;

	RETURN NRO_FACTURA;
	
EXCEPTION
	WHEN OTHERS THEN
		RETURN 0; --ERROR!!!
END;
$$;

SELECT * FROM TIMBRADOS;

SELECT GENERAR_FACTURA(4, 'C', 24, 2, 'TABLA_CLIENTES');
SELECT GENERAR_FACTURA(4, 'C', 24, 37, 'TABLA_PERSONAS');
SELECT * FROM FACTURAS_VENTA;